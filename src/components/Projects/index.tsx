import {
  Center,
  Flex,
  Grid,
  Heading,
  HStack,
  Tag,
  Text,
  Divider,
  Icon,
  Button,
} from "@chakra-ui/react";
import { projects } from "../../portfolio";
import {
  SiTensorflow,
  SiPython,
  SiMongodb,
  SiReact,
  SiTwilio,
  SiExpress,
  SiTypescript,
  SiSelenium,
  SiScikitlearn,
  SiMicrosoftexcel,
  SiCoreldraw,
  SiPowerbi,
  SiTableau,
} from "react-icons/si";
import { BiLogoPostgresql } from "react-icons/bi";
import { useState } from "react";

export interface ProjectContainerModel {
  title: string;
  description: string;
  tag: string;
  tech: string[];
  link?: string;
  children?: JSX.Element;
}

interface ProjectContainer {
  data: ProjectContainerModel;
}

const SWIcon = (props: any) => (
  <Icon viewBox="0 0 512 512" {...props}>
    <path
      display="inline"
      fill="currentColor"
      d="M511.48,198.149c-0.49,3.747-4.809,5.925-25.622,5.771c-101.008-0.876-113.669,14.367-113.669,14.367
		s-8.52,4.931-2.677,16.214c6.242,12.035,82.003,100.599,98.417,131.066c10.66,19.771,25.618,54.013-33.825,74.291
		c-58.168,20.261-167.269,0.19-167.989,0c-26.44-6.646-25.8-11.16-25.505-13.111c0.521-3.737,4.763-5.752,25.564-5.743
		c95.817,0.082,142.136-6.687,153.346-13.687c6.868-4.251,8.021-10.774,7.386-16.5c-1.393-12.493-31.066-48.904-55.587-77.575
		c-25.174-29.497-78.751-80.96-42.631-112.189c43.325-37.454,138.793-20.986,157.465-16.967
		C505.95,188.322,511.894,195.055,511.48,198.149z M198.447,35.444c42.177-0.055,74.967,2.69,97.415,6.714
		c45.665,8.243,34.913,31.289,21.935,53.346c-31.493,53.7-116.545,114.113-121.486,117.525c-6.483,4.464-2.936,7.067,2.735,4.963
		c68.965-25.65,138.458-69.891,166.525-123.631c23.804-45.583,6.741-67.205-29.547-77.394
		c-64.791-18.228-131.965-1.529-137.618,0.136c-8.057,2.363-24.293,6.832-22.924,12.757
		C176.363,33.652,179.588,35.458,198.447,35.444z M239.589,253.051c-67.224-19.875-140.508-2.595-151.694,0.363
		c-16.922,4.491-26.834,9.014-26.14,14.317c0.521,3.919,4.85,6.614,25.645,6.088c49.571-1.198,90.642,0.485,116.604,7.748
		c32.15,8.982,36.11,25.541,20.188,58.068c-7.363,15.034-18.246,30.567-34.736,47.09c-32.913,33.026-74.056,54.512-97.233,66.243
		c-22.533,11.441-30.776,5.362-28.276-5.925c3.085-13.81,67.015-124.438,67.015-124.438c4.813-8.401,5.661-16.286,0-18.649
		c-4.845-2.064-13.633,4.745-22.76,15.306C70.892,362.601,2.063,494.456,0.783,498.784c-1.252,4.142,1.982,4.668,3.216,4.695
		c29.134-0.227,208.016-53.133,265.736-161.267C300.13,285.274,284.746,266.429,239.589,253.051z"
    ></path>
  </Icon>
);

const MatlabIcon = (props: any) => (
  <Icon viewBox="0 0 32 32" {...props}>
    <path
      fill="currentColor"
      d="M5.765 21.661c-1.593-1.188-3.577-2.583-5.765-4.172l7.749-2.979 3.183 2.385c-2.385 2.781-3.973 3.776-5.167 4.771zM27.031 13.317c-0.599-1.588-0.995-3.181-1.593-4.771-0.593-1.792-1.187-3.38-2.183-4.771-0.4-0.593-1.192-1.989-2.187-1.989-0.199 0-0.396 0.197-0.599 0.197-0.595 0.204-1.391 1.391-1.589 2.188-0.593 0.995-1.792 2.583-2.583 3.577-0.199 0.396-0.6 0.797-0.797 0.996-0.593 0.395-1.193 0.995-1.984 1.391-0.204 0-0.401 0.197-0.599 0.197-0.595 0-0.996 0.396-1.391 0.593-0.595 0.6-1.193 1.391-1.787 1.991 0 0.197-0.204 0.395-0.401 0.599l2.984 2.181c2.188-2.583 4.771-5.167 6.557-10.135 0 0-0.593 5.369-5.364 11.131-2.985 3.38-5.371 5.171-5.767 5.567 0 0 0.792-0.197 1.589 0.199 1.593 0.593 2.385 2.781 2.984 4.369 0.396 1.193 0.989 2.188 1.391 3.38 1.589-0.396 2.584-0.995 3.579-1.989 0.989-0.989 1.984-2.183 2.979-3.177 1.792-2.187 3.975-4.968 6.756-3.577 0.4 0.197 0.995 0.599 1.192 0.796 0.599 0.396 0.995 0.792 1.593 1.391 0.991 0.792 1.391 1.391 2.183 1.787-1.984-3.973-3.375-7.948-4.968-12.125z"
    />
  </Icon>
);

const SimulinkIcon = (props: any) => (
  <Icon viewBox="0 0 316 316" {...props}>
    <path
      d="M0 0 C12.38942635 6.75786892 12.38942635 6.75786892 18.08984375 10.14453125 C18.70808517 10.51132996 19.3263266 10.87812866 19.96330261 11.25604248 C21.95600602 12.43935044 23.94684762 13.62574541 25.9375 14.8125 C27.35464679 15.65553129 28.77180189 16.49854862 30.18896484 17.34155273 C40.34470429 23.3890843 50.45989589 29.50152498 60.55395508 35.65136719 C68.4231807 40.44452787 76.31701334 45.19493126 84.22415161 49.92526245 C94.74983834 56.22255909 105.24361876 62.56780676 115.6875 69 C116.78658691 69.67683838 117.88567383 70.35367676 119.01806641 71.05102539 C126.55547717 75.70365145 126.55547717 75.70365145 130 78 C133.21649208 78.33065826 133.21649208 78.33065826 136.94995117 78.31884766 C137.65264633 78.32889328 138.35534149 78.3389389 139.07933044 78.34928894 C141.40053494 78.38016427 143.72162387 78.39716787 146.04296875 78.4140625 C147.65294899 78.43277068 149.26291939 78.45234383 150.87287903 78.4727478 C155.10934655 78.52411211 159.34584588 78.56371473 163.5824585 78.60089111 C168.66618025 78.64793945 173.74974368 78.70955566 178.83333588 78.76873779 C186.55549349 78.85700249 194.27761996 78.92672898 202 79 C202 98.47 202 117.94 202 138 C205.63 138 209.26 138 213 138 C212.17547203 139.73338266 211.33961574 141.46137509 210.5 143.1875 C210.0359375 144.15042969 209.571875 145.11335937 209.09375 146.10546875 C205.98743099 151.88345393 202.4381083 157.41307402 199 163 C230.68 163.495 230.68 163.495 263 164 C263 209.87 263 255.74 263 303 C217.13 303 171.26 303 124 303 C124 257.13 124 211.26 124 164 C159.145 163.505 159.145 163.505 195 163 C190.38 155.08 185.76 147.16 181 139 C181 138.67 181 138.34 181 138 C185.29 138 189.58 138 194 138 C194 121.5 194 105 194 88 C146.64453476 84.83602832 146.64453476 84.83602832 105.01660156 103.62597656 C100.28571569 107.34911789 95.13192276 110.30813636 89.94638062 113.33935547 C87.0192824 115.0628569 84.1276295 116.84400387 81.23046875 118.6171875 C73.52566995 123.30998642 65.76387852 127.90585798 58 132.5 C46.41239554 139.3570161 34.87345414 146.28828468 23.3828125 153.30664062 C18.04831963 156.56120045 12.70285412 159.79662668 7.328125 162.984375 C6.35262695 163.56413086 5.37712891 164.14388672 4.37207031 164.74121094 C2 166 2 166 0 166 C0 140.26 0 114.52 0 88 C-13.2 88 -26.4 88 -40 88 C-40 85.03 -40 82.06 -40 79 C-26.8 79 -13.6 79 0 79 C0 52.93 0 26.86 0 0 Z "
      fill="currentColor"
      transform="translate(46,6)"
    />
  </Icon>
);

const SupersetIcon = (props: any) => (
  <Icon viewBox="0 0 256 256" {...props}>
    <path
      d="M0 0 C2.38650271 2.1392875 4.71483643 4.32177002 6.98120117 6.58813477 C10.01842464 9.85511127 10.01842464 9.85511127 14.25683594 10.55126953 C16.057761 8.92655438 17.74628685 7.27724335 19.44433594 5.55126953 C24.06129447 1.0882578 28.74701801 -2.17288302 34.50683594 -5.01123047 C35.15547607 -5.33285156 35.80411621 -5.65447266 36.47241211 -5.98583984 C48.94205592 -11.84348863 61.24053577 -11.6500941 74.25683594 -7.44873047 C87.9396242 -1.7073252 94.62090838 7.28641975 100.25683594 20.55126953 C103.44551057 31.33013836 102.57088901 45.72027135 97.25683594 55.55126953 C96.84433594 56.33501953 96.43183594 57.11876953 96.00683594 57.92626953 C89.5678367 68.75549552 78.90562172 75.02650392 66.91308594 78.16455078 C57.06819734 79.59785074 46.47224876 79.50301774 37.25683594 75.55126953 C36.45246094 75.22255859 35.64808594 74.89384766 34.81933594 74.55517578 C27.71322459 71.34632238 22.13420925 66.59804631 16.25683594 61.55126953 C14.59533836 60.21150039 12.93022262 58.87615917 11.25683594 57.55126953 C10.61617188 58.21513672 9.97550781 58.87900391 9.31542969 59.56298828 C-2.10270009 71.21935028 -13.42163221 78.54919364 -30.24316406 78.86376953 C-43.82419943 78.93412949 -55.43485367 74.31352255 -65.34082031 65.06298828 C-73.61789892 56.40906707 -76.70894779 45.82194016 -77.11816406 33.98876953 C-76.69239598 21.27126212 -72.04659658 9.36727847 -62.74316406 0.55126953 C-45.15960399 -13.76333123 -17.82934516 -14.81783392 0 0 Z M-44.11816406 24.05126953 C-47.29715694 27.92726085 -48.10969615 31.30482712 -48.01660156 36.35986328 C-47.44867488 40.91138994 -45.67459765 44.8545418 -42.20019531 47.90673828 C-37.37019449 50.96831775 -32.23286584 52.03805764 -26.58691406 51.25048828 C-17.59588867 48.92358558 -11.24153783 41.67273303 -5.74316406 34.55126953 C-12.44261097 26.56508125 -18.61161135 19.33492802 -29.36816406 17.55126953 C-35.68221376 17.19987894 -39.96358262 19.3934015 -44.11816406 24.05126953 Z M32.25683594 31.55126953 C30.92260386 33.73502948 30.92260386 33.73502948 30.25683594 35.55126953 C37.01224809 42.81439533 43.07288149 48.7844254 52.75683594 51.55126953 C58.93139314 51.55126953 64.23019276 50.01403264 68.81933594 45.73876953 C72.21127828 41.2606434 72.14674459 36.3866165 71.90917969 30.94580078 C70.8970345 25.67900933 68.52707574 22.69140546 64.25683594 19.55126953 C51.06981063 13.09231836 40.88461572 22.40582296 32.25683594 31.55126953 Z "
      fill="currentColor"
      transform="translate(117.7431640625,92.44873046875)"
    />
    <path
      d="M0 0 C5.96128189 0.31612858 8.67307525 2.84335601 12.75 6.8125 C13.61431641 7.61397461 13.61431641 7.61397461 14.49609375 8.43164062 C17.27647761 11.06620016 19.61821538 13.3418138 21 17 C20.30132812 17.75925781 19.60265625 18.51851562 18.8828125 19.30078125 C17.96343578 20.30459053 17.04417079 21.30850215 16.125 22.3125 C15.66480469 22.81201172 15.20460938 23.31152344 14.73046875 23.82617188 C12.61393392 26.14209043 10.74473617 28.38289574 9 31 C8.34 31 7.68 31 7 31 C6.7525 31.804375 6.505 32.60875 6.25 33.4375 C5.8375 34.283125 5.425 35.12875 5 36 C2.921875 36.66015625 2.921875 36.66015625 1 37 C0.443125 36.33613281 -0.11375 35.67226562 -0.6875 34.98828125 C-5.40754506 29.52674263 -9.65730699 25.45965073 -16 22 C-15.13391982 17.55316145 -12.61722889 14.87881666 -9.6875 11.5625 C-8.71165542 10.43930935 -7.73638601 9.31561869 -6.76171875 8.19140625 C-6.29427246 7.65531738 -5.82682617 7.11922852 -5.34521484 6.56689453 C-3.50523335 4.42370012 -1.74661044 2.21956433 0 0 Z "
      fill="#21A3C4"
      transform="translate(110,90)"
    />
    <path
      d="M0 0 C1.02083333 0.875 2.04166667 1.75 3.0625 2.625 C3.701875 3.17027344 4.34125 3.71554688 5 4.27734375 C6.28206574 5.38162303 7.55398004 6.49786568 8.8125 7.62890625 C12.33637708 10.76735927 15.62947783 13.08123417 20 15 C19.44105221 18.93968041 17.570597 20.85026994 14.875 23.6875 C10.62603277 28.26278791 6.74850073 33.01003439 3 38 C-1.23333106 36.57096265 -4.14798867 34.48388153 -7.5625 31.625 C-8.49191406 30.85414063 -9.42132813 30.08328125 -10.37890625 29.2890625 C-11.24386719 28.53367188 -12.10882813 27.77828125 -13 27 C-13.79277344 26.32710937 -14.58554688 25.65421875 -15.40234375 24.9609375 C-15.92957031 24.31382812 -16.45679688 23.66671875 -17 23 C-16.61882562 19.55684462 -15.0967841 17.57051377 -12.91015625 14.9609375 C-12.29076172 14.21585938 -11.67136719 13.47078125 -11.03320312 12.703125 C-10.38287109 11.93484375 -9.73253906 11.1665625 -9.0625 10.375 C-8.09280273 9.21097656 -8.09280273 9.21097656 -7.10351562 8.0234375 C-2.41629464 2.41629464 -2.41629464 2.41629464 0 0 Z "
      fill="#21A3C3"
      transform="translate(147,127)"
    />
  </Icon>
);

const StatsmodelIcon = (props: any) => (
  <Icon viewBox="0 0 281.72892 276.23224" {...props}>
    <clipPath clipPathUnits="userSpaceOnUse" id="clipPath1464">
      <rect
        fill="currentColor"
        fillOpacity={0.13333333}
        stroke="none"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={0.22613065}
        width="271.1456"
        height="270.94055"
        x="0.0029871927"
        y="26.203016"
        ry="0.14095114"
        rx="0"
      />
    </clipPath>
    <g
      xmlns="http://www.w3.org/2000/svg"
      transform="translate(5.2886794,-23.557183)"
      id="layer1"
      clip-path="url(#clipPath1464)"
    >
      <path
        d="m 11.389637,436.95325 c 0,0 -9.933742,-239.7295 48.46627,-273.92653 64.280963,-37.64071 115.006233,22.97054 154.506923,-10.25393 51.76708,-43.54185 44.27756,-197.596591 44.27756,-197.596591"
        fill="none"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={30}
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 77.393751,291.61461 c -13.78268,0 -25.00018,-11.21715 -25.00018,-24.99982 0,-13.78303 11.2175,-25.00018 25.00018,-25.00018 13.782667,0 24.999819,11.21715 24.999819,25.00018 0,13.78267 -11.217152,24.99982 -24.999819,24.99982 z m 0,-34.21207 c -5.08361,0 16.04472,19.22937 -9.21225,9.21225 -4.72553,-1.87418 4.12864,9.21217 9.21225,9.21217 5.083621,0 9.212171,-4.12855 9.212171,-9.21217 0,-5.08361 -4.12855,-9.21225 -9.212171,-9.21225 z"
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 187.62339,89.475577 c -13.78268,0 -25.00018,-11.21716 -25.00018,-24.999833 0,-13.78303 11.2175,-25.00018 25.00018,-25.00018 13.78267,0 24.99982,11.21715 24.99982,25.00018 0,13.782673 -11.21715,24.999833 -24.99982,24.999833 z m 0,-34.212083 c -5.08361,0 14.97564,19.095734 -9.21225,9.21225 -4.70592,-1.922898 4.12864,9.212173 9.21225,9.212173 5.08362,0 9.21217,-4.128553 9.21217,-9.212173 0,-5.08361 -4.12855,-9.21225 -9.21217,-9.21225 z"
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 32.190044,127.2274 c -13.78268,0 -25.0001807,-11.21716 -25.0001807,-24.99983 0,-13.783036 11.2175007,-25.000186 25.0001807,-25.000186 13.78267,0 24.99982,11.21715 24.99982,25.000186 0,13.78267 -11.21715,24.99983 -24.99982,24.99983 z m 0,-34.212086 c -5.08361,0 14.842008,18.160296 -9.21225,9.212256 -4.764634,-1.77241 4.12864,9.21217 9.21225,9.21217 5.08362,0 9.21217,-4.12855 9.21217,-9.21217 0,-5.083616 -4.12855,-9.212256 -9.21217,-9.212256 z"
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 236.80098,246.09552 c -13.78268,0 -25.00018,-11.21717 -25.00018,-24.99984 0,-13.78303 11.2175,-25.00018 25.00018,-25.00018 13.78267,0 24.99982,11.21715 24.99982,25.00018 0,13.78267 -11.21715,24.99984 -24.99982,24.99984 z m 0,-34.21209 c -5.08361,0 14.84201,18.76165 -9.21225,9.21225 -4.7249,-1.87576 4.12864,9.21217 9.21225,9.21217 5.08362,0 9.21217,-4.12855 9.21217,-9.21217 0,-5.08361 -4.12855,-9.21225 -9.21217,-9.21225 z"
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 129.35862,234.33566 c -13.78268,0 -25.00018,-11.21717 -25.00018,-24.99984 0,-13.78303 11.2175,-25.00018 25.00018,-25.00018 13.78267,0 24.99983,11.21715 24.99983,25.00018 0,13.78267 -11.21716,24.99984 -24.99983,24.99984 z m 0,-34.21209 c -5.08361,0 16.84653,17.49212 -9.21225,9.21225 -4.84493,-1.53942 4.12864,9.21217 9.21225,9.21217 5.08362,0 9.21217,-4.12855 9.21217,-9.21217 0,-5.08361 -4.12855,-9.21225 -9.21217,-9.21225 z"
      />
      <path
        fill="currentColor"
        fillOpacity={1}
        stroke="currentColor"
        strokeWidth={7}
        strokeMiterlimit={4}
        strokeDasharray="none"
        strokeOpacity={1}
        d="m 99.42444,85.199254 c -13.78268,0 -25.000177,-11.21716 -25.000177,-24.999823 0,-13.78303 11.217497,-25.00018 25.000177,-25.00018 13.78267,0 24.99982,11.21715 24.99982,25.00018 0,13.782663 -11.21715,24.999823 -24.99982,24.999823 z m 0,-34.212073 c -2.236067,1.982467 13.13864,19.689384 -9.21225,9.21225 -4.602997,-2.157687 4.12864,9.21217 9.21225,9.21217 5.08362,0 9.21217,-4.12855 9.21217,-9.21217 0,-5.08361 -5.40828,-12.584728 -9.21217,-9.21225 z"
      />
    </g>
  </Icon>
);

const ProjectContainer = (props: ProjectContainer) => {
  const data = props.data;
  return (
    <Center
      flexDir={"column"}
      p={4}
      m={0}
      boxShadow={"dark-lg"}
      gap={4}
      cursor={"pointer"}
      transition={"transform .2s"}
      _hover={{ transform: "scale(1.05)" }}
      onClick={() =>
        window.open(data.link ? data.link : "projects/" + data.title)
      }
    >
      <Heading as={"h3"} size={"md"}>
        {data.title}
      </Heading>
      <Tag>{data.tag}</Tag>
      <Text>{data.description}</Text>
      <HStack spacing={4}>
        {data.tech.map((val: string, _) => {
          switch (val) {
            case "Python":
              return <Icon as={SiPython} boxSize={6} />;
            case "Tensorflow":
              return <Icon as={SiTensorflow} boxSize={6} />;
            case "React":
              return <Icon as={SiReact} boxSize={6} />;
            case "Express":
              return <Icon as={SiExpress} boxSize={6} />;
            case "Twilio":
              return <Icon as={SiTwilio} boxSize={6} />;
            case "Typescript":
              return <Icon as={SiTypescript} boxSize={6} />;
            case "Mongodb":
              return <Icon as={SiMongodb} boxSize={6} />;
            case "Selenium":
              return <Icon as={SiSelenium} boxSize={6} />;
            case "Scikitlearn":
              return <Icon as={SiScikitlearn} boxSize={6} />;
            case "Excel":
              return <Icon as={SiMicrosoftexcel} boxSize={6} />;
            case "Coreldraw":
              return <Icon as={SiCoreldraw} boxSize={6} />;
            case "Solidworks":
              return <SWIcon boxSize={6} />;
            case "Matlab":
              return <MatlabIcon boxSize={6} />;
            case "Simulink":
              return <SimulinkIcon boxSize={6} />;
            case "Abacus":
              return <SWIcon boxSize={6} />;
            case "PowerBI":
              return <Icon as={SiPowerbi} boxSize={6} />;
            case "Tableau":
              return <Icon as={SiTableau} boxSize={6} />;
            case "PostgreSQL":
              return <Icon as={BiLogoPostgresql} boxSize={8} />;
            case "Superset":
              return <Icon as={SupersetIcon} boxSize={9} />;
            case "Statsmodels":
              return <Icon as={StatsmodelIcon} boxSize={6} />;
            default:
              return <Heading size={"sm"}>{val}</Heading>;
          }
        })}
      </HStack>
    </Center>
  );
};

const Projects = () => {
  const [selectedTag, setSelectedTag] = useState<string | null>(null);

  projects.sort((a, b) => (a.tag < b.tag ? -1 : 1));

  const handleTagClick = (tag: string) => {
    setSelectedTag((x) => (x === tag ? null : tag));
  };

  const projectsFiltered = selectedTag
    ? projects.filter((project) => project.tag.toLowerCase() === selectedTag)
    : projects;

  return (
    <Flex
      id={"project"}
      flexDir={"column"}
      alignItems={"center"}
      justifyContent={"center"}
      w={"95%"}
      gap={5}
      p={5}
      mt={10}
    >
      <Heading as={"h2"} size={"xl"}>
        Projects
      </Heading>
      <Divider borderWidth={1} />
      <Center gap={5}>
        <Button
          colorScheme={
            selectedTag === "data" || selectedTag === null ? "teal" : "gray"
          }
          onClick={() => handleTagClick("data")}
        >
          Data
        </Button>
        <Button
          colorScheme={
            selectedTag === "machine learning" || selectedTag === null
              ? "teal"
              : "gray"
          }
          onClick={() => handleTagClick("machine learning")}
        >
          Machine Learning
        </Button>
        <Button
          colorScheme={
            selectedTag === "engineering" || selectedTag === null
              ? "teal"
              : "gray"
          }
          onClick={() => handleTagClick("engineering")}
        >
          Engineering
        </Button>
      </Center>
      <Grid templateColumns="repeat(3, 1fr)" gap={5} w={"100%"}>
        {projectsFiltered.map((val: ProjectContainerModel, _) => (
          <ProjectContainer data={val} />
        ))}
      </Grid>
    </Flex>
  );
};

export default Projects;
